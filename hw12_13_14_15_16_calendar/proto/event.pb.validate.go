// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for User

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.NotifyBefore != nil {
		// no validation rules for NotifyBefore
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on CreateEventReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateEventReqMultiError,
// or nil if none found.
func (m *CreateEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateEventReqValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDate() == nil {
		err := CreateEventReqValidationError{
			field:  "Date",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := CreateEventReqValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUser()) < 1 {
		err := CreateEventReqValidationError{
			field:  "User",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.NotifyBefore != nil {
		// no validation rules for NotifyBefore
	}

	if len(errors) > 0 {
		return CreateEventReqMultiError(errors)
	}

	return nil
}

// CreateEventReqMultiError is an error wrapping multiple validation errors
// returned by CreateEventReq.ValidateAll() if the designated constraints
// aren't met.
type CreateEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventReqMultiError) AllErrors() []error { return m }

// CreateEventReqValidationError is the validation error returned by
// CreateEventReq.Validate if the designated constraints aren't met.
type CreateEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventReqValidationError) ErrorName() string { return "CreateEventReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventReqValidationError{}

// Validate checks the field values on EditEventReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditEventReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditEventReqMultiError, or
// nil if none found.
func (m *EditEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := EditEventReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Date != nil {

		if all {
			switch v := interface{}(m.GetDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditEventReqValidationError{
						field:  "Date",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditEventReqValidationError{
						field:  "Date",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditEventReqValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditEventReqValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditEventReqValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditEventReqValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.User != nil {
		// no validation rules for User
	}

	if m.NotifyBefore != nil {
		// no validation rules for NotifyBefore
	}

	if len(errors) > 0 {
		return EditEventReqMultiError(errors)
	}

	return nil
}

// EditEventReqMultiError is an error wrapping multiple validation errors
// returned by EditEventReq.ValidateAll() if the designated constraints aren't met.
type EditEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditEventReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditEventReqMultiError) AllErrors() []error { return m }

// EditEventReqValidationError is the validation error returned by
// EditEventReq.Validate if the designated constraints aren't met.
type EditEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditEventReqValidationError) ErrorName() string { return "EditEventReqValidationError" }

// Error satisfies the builtin error interface
func (e EditEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditEventReqValidationError{}

// Validate checks the field values on EventByIdReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventByIdReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventByIdReqMultiError, or
// nil if none found.
func (m *EventByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EventByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEventId()) < 1 {
		err := EventByIdReqValidationError{
			field:  "EventId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EventByIdReqMultiError(errors)
	}

	return nil
}

// EventByIdReqMultiError is an error wrapping multiple validation errors
// returned by EventByIdReq.ValidateAll() if the designated constraints aren't met.
type EventByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventByIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventByIdReqMultiError) AllErrors() []error { return m }

// EventByIdReqValidationError is the validation error returned by
// EventByIdReq.Validate if the designated constraints aren't met.
type EventByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventByIdReqValidationError) ErrorName() string { return "EventByIdReqValidationError" }

// Error satisfies the builtin error interface
func (e EventByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventByIdReqValidationError{}

// Validate checks the field values on GetEventListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEventListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventListReqMultiError, or nil if none found.
func (m *GetEventListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Start != nil {
		// no validation rules for Start
	}

	if m.End != nil {
		// no validation rules for End
	}

	if len(errors) > 0 {
		return GetEventListReqMultiError(errors)
	}

	return nil
}

// GetEventListReqMultiError is an error wrapping multiple validation errors
// returned by GetEventListReq.ValidateAll() if the designated constraints
// aren't met.
type GetEventListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventListReqMultiError) AllErrors() []error { return m }

// GetEventListReqValidationError is the validation error returned by
// GetEventListReq.Validate if the designated constraints aren't met.
type GetEventListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventListReqValidationError) ErrorName() string { return "GetEventListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetEventListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventListReqValidationError{}

// Validate checks the field values on GetEventListRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEventListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventListResMultiError, or nil if none found.
func (m *GetEventListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventListResValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventListResValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventListResValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEventListResMultiError(errors)
	}

	return nil
}

// GetEventListResMultiError is an error wrapping multiple validation errors
// returned by GetEventListRes.ValidateAll() if the designated constraints
// aren't met.
type GetEventListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventListResMultiError) AllErrors() []error { return m }

// GetEventListResValidationError is the validation error returned by
// GetEventListRes.Validate if the designated constraints aren't met.
type GetEventListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventListResValidationError) ErrorName() string { return "GetEventListResValidationError" }

// Error satisfies the builtin error interface
func (e GetEventListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventListResValidationError{}
